// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Punchcard.Core.Server.DataModel;

#nullable disable

namespace Punchcard.Core.Server.DataModel.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230927195846_inital")]
    partial class inital
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Punchcard.Core.Server.DataModel.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AppPermissions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("BatteryPercentage")
                        .HasColumnType("real");

                    b.Property<string>("Browser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrowserVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuildId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CompletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ComputerOs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComputerOsVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceLanguage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceOs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Dismissed")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ElevatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("FeedbackType")
                        .HasColumnType("int");

                    b.Property<bool>("IsLowPowerMode")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PagesVisited")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Severity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("SubmittedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("Punchcard.Core.Server.DataModel.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "ReadTenant",
                            Description = "Permission to read tenant information",
                            Name = "Read tenant"
                        },
                        new
                        {
                            Id = 2,
                            Code = "WriteTenant",
                            Description = "Permission to write tenant information",
                            Name = "Write tenant"
                        },
                        new
                        {
                            Id = 3,
                            Code = "ReadRole",
                            Description = "Permission to read role information",
                            Name = "Read role"
                        },
                        new
                        {
                            Id = 4,
                            Code = "WriteRole",
                            Description = "Permission to write role information",
                            Name = "Write role"
                        },
                        new
                        {
                            Id = 5,
                            Code = "ReadPickList",
                            Description = "Permission to read picklist information",
                            Name = "Read picklist"
                        },
                        new
                        {
                            Id = 6,
                            Code = "WritePickList",
                            Description = "Permission to write picklist information",
                            Name = "Write picklist"
                        },
                        new
                        {
                            Id = 7,
                            Code = "ReadUser",
                            Description = "Permission to read user information",
                            Name = "Read user"
                        },
                        new
                        {
                            Id = 8,
                            Code = "WriteUser",
                            Description = "Permission to read and write user information",
                            Name = "Write user"
                        },
                        new
                        {
                            Id = 9,
                            Code = "GlobalAdmin",
                            Description = "Must have global admin permission to modify or add people to the global admin role",
                            Name = "Global Admin"
                        });
                });

            modelBuilder.Entity("Punchcard.Core.Server.DataModel.PickListItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("PickListTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("Sort")
                        .HasColumnType("int");

                    b.Property<string>("Value1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value2")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("PickListTypeId");

                    b.ToTable("PickListItem");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "AB",
                            Description = "Alberta",
                            IsActive = true,
                            IsDefault = false,
                            PickListTypeId = 1,
                            Sort = 0
                        },
                        new
                        {
                            Id = 2,
                            Code = "BC",
                            Description = "British Columbia",
                            IsActive = true,
                            IsDefault = false,
                            PickListTypeId = 1,
                            Sort = 1
                        },
                        new
                        {
                            Id = 3,
                            Code = "MB",
                            Description = "Manitoba",
                            IsActive = true,
                            IsDefault = false,
                            PickListTypeId = 1,
                            Sort = 2
                        },
                        new
                        {
                            Id = 4,
                            Code = "NB",
                            Description = "New Brunswick",
                            IsActive = true,
                            IsDefault = false,
                            PickListTypeId = 1,
                            Sort = 3
                        },
                        new
                        {
                            Id = 5,
                            Code = "NL",
                            Description = "Newfoundland and Labrador",
                            IsActive = true,
                            IsDefault = false,
                            PickListTypeId = 1,
                            Sort = 4
                        },
                        new
                        {
                            Id = 6,
                            Code = "NS",
                            Description = "Nova Scotia",
                            IsActive = true,
                            IsDefault = false,
                            PickListTypeId = 1,
                            Sort = 5
                        },
                        new
                        {
                            Id = 7,
                            Code = "ON",
                            Description = "Ontario",
                            IsActive = true,
                            IsDefault = false,
                            PickListTypeId = 1,
                            Sort = 6
                        },
                        new
                        {
                            Id = 8,
                            Code = "PE",
                            Description = "Prince Edward Island",
                            IsActive = true,
                            IsDefault = false,
                            PickListTypeId = 1,
                            Sort = 7
                        },
                        new
                        {
                            Id = 9,
                            Code = "QC",
                            Description = "Quebec",
                            IsActive = true,
                            IsDefault = false,
                            PickListTypeId = 1,
                            Sort = 8
                        },
                        new
                        {
                            Id = 10,
                            Code = "SK",
                            Description = "Saskatchewan",
                            IsActive = true,
                            IsDefault = false,
                            PickListTypeId = 1,
                            Sort = 9
                        },
                        new
                        {
                            Id = 11,
                            Code = "NT",
                            Description = "Northwest Territories",
                            IsActive = true,
                            IsDefault = false,
                            PickListTypeId = 1,
                            Sort = 10
                        },
                        new
                        {
                            Id = 12,
                            Code = "YT",
                            Description = "Yukon",
                            IsActive = true,
                            IsDefault = false,
                            PickListTypeId = 1,
                            Sort = 11
                        },
                        new
                        {
                            Id = 13,
                            Code = "NU",
                            Description = "Nunavut",
                            IsActive = true,
                            IsDefault = false,
                            PickListTypeId = 1,
                            Sort = 12
                        });
                });

            modelBuilder.Entity("Punchcard.Core.Server.DataModel.PickListType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("PickListType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "Province",
                            Description = "Province",
                            IsActive = false
                        });
                });

            modelBuilder.Entity("Punchcard.Core.Server.DataModel.PunchcardUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AzureObjectId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RolesList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("PunchcardUser");
                });

            modelBuilder.Entity("Punchcard.Core.Server.DataModel.PunchcardUserXrefRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("PunchcardUserXrefRole");
                });

            modelBuilder.Entity("Punchcard.Core.Server.DataModel.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Role should have access to everything",
                            IsDefault = false,
                            Name = "Global Admin"
                        });
                });

            modelBuilder.Entity("Punchcard.Core.Server.DataModel.RoleXrefPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleXrefPermission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PermissionId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            PermissionId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 3,
                            PermissionId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 4,
                            PermissionId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 5,
                            PermissionId = 5,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 6,
                            PermissionId = 6,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 7,
                            PermissionId = 7,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 8,
                            PermissionId = 8,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 9,
                            PermissionId = 9,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Punchcard.Core.Server.DataModel.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tenant");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            LastModifiedBy = "System",
                            Name = "Default Tenant"
                        });
                });

            modelBuilder.Entity("Punchcard.Core.Server.DataModel.PickListItem", b =>
                {
                    b.HasOne("Punchcard.Core.Server.DataModel.PickListItem", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("Punchcard.Core.Server.DataModel.PickListType", "PickListType")
                        .WithMany()
                        .HasForeignKey("PickListTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("PickListType");
                });

            modelBuilder.Entity("Punchcard.Core.Server.DataModel.PickListType", b =>
                {
                    b.HasOne("Punchcard.Core.Server.DataModel.PickListType", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Punchcard.Core.Server.DataModel.PunchcardUser", b =>
                {
                    b.HasOne("Punchcard.Core.Server.DataModel.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Punchcard.Core.Server.DataModel.PunchcardUserXrefRole", b =>
                {
                    b.HasOne("Punchcard.Core.Server.DataModel.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Punchcard.Core.Server.DataModel.PunchcardUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Punchcard.Core.Server.DataModel.RoleXrefPermission", b =>
                {
                    b.HasOne("Punchcard.Core.Server.DataModel.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Punchcard.Core.Server.DataModel.Role", "Role")
                        .WithMany("RoleXrefPermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Punchcard.Core.Server.DataModel.Role", b =>
                {
                    b.Navigation("RoleXrefPermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
